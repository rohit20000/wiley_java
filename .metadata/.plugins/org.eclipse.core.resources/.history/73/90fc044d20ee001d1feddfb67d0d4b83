package data_structures;

// Tree traversal in java
class NodeOne {
	int key;
	NodeOne left, right;

	public NodeOne(int item) {
		key = item;
		left = right = null;
	}
}

public class BinaryTree2 {
	// Root of the Binary Tree
	NodeOne root;

	public BinaryTree2(int key) {
		root = new NodeOne(key);
	}

	// Postorder traversal
	void postOrder(NodeOne NodeOne) {
		if (NodeOne == null)
			return;

		// Traverse Left
		postOrder(NodeOne.left);
		// Traverse right
		postOrder(NodeOne.right);
		// Traverse root
		System.out.println(NodeOne.item + "-->");
	}

	// inorder traversal
	void inOrder(NodeOne NodeOne) {
		if (NodeOne == null)
			return;

		// Traverse Left
		postOrder(NodeOne.left);
		// Traverse root
		System.out.println(NodeOne.item + "-->");
		// Traverse right
		postOrder(NodeOne.right);

	}

	// pre order traversal
	void preOrder(NodeOne NodeOne) {
		if (NodeOne == null)
			return;

		// Traverse root
		System.out.println(NodeOne.item + "-->");
		// Traverse Left
		postOrder(NodeOne.left);
		// Traverse right
		postOrder(NodeOne.right);

	}

	public static void main(String[] args) {
		BinaryTree2 tree =new BinaryTree2();
		tree.root = new NodeOne(1);
		tree.root.left = new NodeOne(12);
		tree.root.right = new NodeOne(9);
		tree.root.left.left = new NodeOne(5);
		tree.root.left.right = new NodeOne(6);
		
		System.out.println("Inorder Traversal");
		tree.inOrder(tree.root);
		
		System.out.println("\nPreorder Traversal");
		tree.preOrder(tree.root);
		
		System.out.println("\nPostorder Traversal");
		tree.postOrder(tree.root);

	}

}
